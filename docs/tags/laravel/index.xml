<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>laravel on XiaoXiao Notes</title>
    <link>https://blog.10oz.tw/tags/laravel/</link>
    <description>Recent content in laravel on XiaoXiao Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Aug 2019 19:59:34 +0800</lastBuildDate>
    
	<atom:link href="https://blog.10oz.tw/tags/laravel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>筆記 Install php MongoDB driver on MacOS</title>
      <link>https://blog.10oz.tw/20190815-install-php-mongodb-driver-on-macos/</link>
      <pubDate>Thu, 15 Aug 2019 19:59:34 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190815-install-php-mongodb-driver-on-macos/</guid>
      <description>** 2019.08 更新** https://www.php.net/manual/en/mongodb.installation.homebrew.php mac php72 請使用 pecl install mongodb 安裝 mongodb driver 因為 mongodb, xdebug 從 homebrew 被移除了
[time=Thu, Aug 15, 2019 7:59 PM]
 問題描述 想在 Laravel 用 MongoDB
composer require jenssegers/mongodb 錯誤：
the requested PHP extension mongodb is missing from your system. =&amp;gt; 沒有裝 php 的擴展
解決方案 先來個悲劇， homebrew 拿掉 php-mongodb 的擴展了QQ
只好去裝人家的，我的 php 版本是 7.1 所以裝 php71-mongodb 忘記版本的話可以用 php --version 查看
brew tap kyslik/php brew install phpxx-mongodb {xx = 71,72} 裝完惹！ 但是當我輸入 php -i 檢查的時候 dyld: Library not loaded: /usr/local/opt/readline/lib/libreadline.</description>
    </item>
    
    <item>
      <title>筆記 laravel test - 我們也來寫測試</title>
      <link>https://blog.10oz.tw/20190703-laravel-testing/</link>
      <pubDate>Wed, 03 Jul 2019 13:18:13 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190703-laravel-testing/</guid>
      <description>laravel version: 5.8 [time=Wed, Jul 3, 2019 1:27 PM]
 開始之前 test 的設定檔在 ./phpunit.xml ，
&amp;lt;!--phpunit.xml --&amp;gt; &amp;lt;phpunit&amp;gt; &amp;lt;php&amp;gt; &amp;lt;!--laravel 環境設定檔案使用 .emv.testing --&amp;gt; &amp;lt;server name=&amp;#34;APP_ENV&amp;#34; value=&amp;#34;testing&amp;#34;/&amp;gt; &amp;lt;!--測試環境的資料庫連線設定，我們將使用 sqlite --&amp;gt; &amp;lt;server name=&amp;#34;DB_CONNECTION&amp;#34; value=&amp;#34;sqlite_for_testing&amp;#34;/&amp;gt; &amp;lt;env name=&amp;#34;DB_DATABASE&amp;#34; value=&amp;#34;:memory:&amp;#34;/&amp;gt; &amp;lt;/php&amp;gt; &amp;lt;/phpunit&amp;gt; php 也要加在 Config/dataset.php
/* Config/dataset.php */ &amp;lt;?php &amp;#39;connections&amp;#39; =&amp;gt; [ // ...other db connection configuration  // 為了方便測試，使用 memory sqlite 做為我們的資料庫 	&amp;#39;sqlite_for_testing&amp;#39; =&amp;gt; [ &amp;#39;driver&amp;#39; =&amp;gt; &amp;#39;sqlite&amp;#39;, &amp;#39;database&amp;#39; =&amp;gt; &amp;#39;:memory:&amp;#39;, &amp;#39;prefix&amp;#39; =&amp;gt; &amp;#39;&amp;#39;, &amp;#39;foreign_key_constraints&amp;#39; =&amp;gt; true, ], ] 確認好設定後，我們執行起來</description>
    </item>
    
    <item>
      <title>筆記 artisan 的大紅色好刺眼啊啊啊啊</title>
      <link>https://blog.10oz.tw/20190523-laravel-artisan-change-color-style/</link>
      <pubDate>Thu, 23 May 2019 02:51:38 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190523-laravel-artisan-change-color-style/</guid>
      <description> Laravel 5.8
 $kernel = $app-&amp;gt;make(Illuminate\Contracts\Console\Kernel::class); $output = new Symfony\Component\Console\Output\ConsoleOutput; $output-&amp;gt;getFormatter() -&amp;gt;setStyle(&amp;#39;error&amp;#39;, new \Symfony\Component\Console\Formatter\OutputFormatterStyle(&amp;#39;yellow&amp;#39;)); $status = $kernel-&amp;gt;handle( $input = new Symfony\Component\Console\Input\ArgvInput, $output ); 修改的話在 line:37 可以帶三種參數
public function __construct( string $foreground = null, string $background = null, array $options = []){ /****/ } 三種參數可以參考
private static $availableForegroundColors = [ &amp;#39;black&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 30, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;red&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 31, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;green&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 32, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;yellow&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 33, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;blue&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 34, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;magenta&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 35, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;cyan&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 36, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;white&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 37, &amp;#39;unset&amp;#39; =&amp;gt; 39], &amp;#39;default&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 39, &amp;#39;unset&amp;#39; =&amp;gt; 39], ]; private static $availableBackgroundColors = [ &amp;#39;black&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 40, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;red&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 41, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;green&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 42, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;yellow&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 43, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;blue&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 44, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;magenta&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 45, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;cyan&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 46, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;white&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 47, &amp;#39;unset&amp;#39; =&amp;gt; 49], &amp;#39;default&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 49, &amp;#39;unset&amp;#39; =&amp;gt; 49], ]; private static $availableOptions = [ &amp;#39;bold&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 1, &amp;#39;unset&amp;#39; =&amp;gt; 22], &amp;#39;underscore&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 4, &amp;#39;unset&amp;#39; =&amp;gt; 24], &amp;#39;blink&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 5, &amp;#39;unset&amp;#39; =&amp;gt; 25], &amp;#39;reverse&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 7, &amp;#39;unset&amp;#39; =&amp;gt; 27], &amp;#39;conceal&amp;#39; =&amp;gt; [&amp;#39;set&amp;#39; =&amp;gt; 8, &amp;#39;unset&amp;#39; =&amp;gt; 28], ]; </description>
    </item>
    
    <item>
      <title>筆記 Laravel with Keycloak</title>
      <link>https://blog.10oz.tw/20190424-laravel-with-keycloak/</link>
      <pubDate>Wed, 24 Apr 2019 10:05:56 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190424-laravel-with-keycloak/</guid>
      <description>laravel version: 5.8
 一、安裝篇 裝這個，跟著他的步驟做 https://github.com/robsontenorio/laravel-keycloak-guard
二、使用篇 我們假設 Keycloak Server 有大大幫你開好了 (沒有請點我)
取得 Keycloak 金鑰 https://auth.leotekiot.com 預設帳號: admin 預設密碼: Pa55w0rd
登入後，依序操作得到金鑰 Realm Setting &amp;gt; Keys &amp;gt; RS256 Public key 放到 laravel 的 .env 設定中
KEYCLOAK_REALM_PUBLIC_KEY=你的公開金鑰 登入 Keycloak Clients &amp;gt; {{ 選個Client }} &amp;gt; Credentials Secret 那邊就是我們的 Client Secret 了 User &amp;gt; View all users &amp;gt; {{ 選個User }} 或是你要新創一個也可以， 總之要記得你的帳號密碼喔
移駕到 Postman 來嘗試登入 用這個 API 取得 token， auth_realm 填上現在使用的 Realm 預設是 Master</description>
    </item>
    
    <item>
      <title>筆記 Laravel Eloquent Model 的 relation</title>
      <link>https://blog.10oz.tw/20190416-relation-of-laravel-eloquent-model/</link>
      <pubDate>Tue, 16 Apr 2019 20:35:16 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190416-relation-of-laravel-eloquent-model/</guid>
      <description>版本 Larael 5.7
 範例模型 accounts
CREATE TABLE `accounts` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `website_id` int(10) unsigned NOT NULL, `account` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL, `password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL, `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL, `created_at` timestamp NULL DEFAULT NULL, `updated_at` timestamp NULL DEFAULT NULL, `deleted_at` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`) ); websites
CREATE TABLE `websites` ( `id` int(10) unsigned NOT NULL AUTO_INCREMENT, `name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL, `created_at` timestamp NULL DEFAULT NULL, `updated_at` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`) ) accounts table 底下有個 cloumn website_id 用來關聯 websites 這張表。</description>
    </item>
    
    <item>
      <title>筆記 Laravel API 權限 (Passport)</title>
      <link>https://blog.10oz.tw/20190217-laravel-api-permission-by-passport/</link>
      <pubDate>Sun, 17 Feb 2019 09:46:31 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190217-laravel-api-permission-by-passport/</guid>
      <description>使用 JWT 版本 (2018/09 更新)  前面幾個步驟同官方安裝教學
 步驟說明 1. composer 載回來 composer require laravel/passport
2. 開資料表 php artisan migrate 然後你會多 5 張表 (主要使用到 oauth_access_token)
3.創造 key php artisan passport:install
他會幫你的 OAuth Server 準備一對 Key (storage/oauth-private.key, storage/outhpublic.key)
同時也準備 2 個 Client Key 在 oauth_clients 資料表內
Personal access client created successfully. Client ID: 1 Client Secret: ETOhMRq7faRSnb1jN2F168jlbYFcf25MOHj0cOxt Password grant client created successfully. Client ID: 2 Client Secret: fibc50RiIjAiYSLR7xceQyoxQE3oGWtIXpCLj9Co 4. 附加 passport 至 auth 系統  在 app\User.</description>
    </item>
    
    <item>
      <title>筆記 laravel 真新手時間</title>
      <link>https://blog.10oz.tw/20190123-a-new-in-laravel/</link>
      <pubDate>Wed, 23 Jan 2019 20:36:55 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190123-a-new-in-laravel/</guid>
      <description>新手入門 結構介紹 我們現在在 laravel v5.7
一起來看一下 laravel 專案的結構吧
app 大部份的網頁後端主要程式碼 也就是說他很重要
  (Model)放在外面的大寫開頭們～
例如說 User.php 就是， 他們是 Model，定義了資料庫的物件模式
  Http/
 Controllers/
controller可以作為路由進來後的流程控制器，可以想像它負責告訴大家要做什麼 Middleware/
middleware叫做中間層，用來包著你的程式內容，request 進出都會經過    bootstrap 程式啟動第一個執行的套件
config 所有應用的設定檔們
database 顧名思義：資料庫～
 migrations/
紀錄了資料庫的心路歷程
其中定義了up跟down，模擬建立資料還有需要rollback回去時的動作 fatories/
定義了一些資料的模式，可以使用seeder批量製造 seeds/
他是一顆會長出資料的種子，當你需要產生測試用的資料的時候很常遇到他  public 對外公開給使用者看得到的資源
 Ex: 圖片、webpack包裝過的檔案  resources 本地資源
  Ex: js的原始碼、CSS&amp;hellip;
  /assets
 /js/components
裡面寫了好多 vue component 們，他們是前端主力!    /views</description>
    </item>
    
    <item>
      <title>筆記 安裝 Laravel on MacOS</title>
      <link>https://blog.10oz.tw/20190117-install-laravel-on-macos/</link>
      <pubDate>Thu, 17 Jan 2019 12:03:16 +0800</pubDate>
      
      <guid>https://blog.10oz.tw/20190117-install-laravel-on-macos/</guid>
      <description>Step by Step 安裝指南 事前準備 HomeBrew 首先安裝 HomeBrew，他是 Mac 上的套件管理工具
在終端機執行他： (裝過了可以跳過)
/usr/bin/ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34; ＊ Docker 安裝 Docker， 以會需要他多多照顧
不想登入可以直接點 下載連結 下載 .dmg 並安裝
安裝 python3 用 brew 裝，已經裝好了，跳過
安裝 docker-compose 就是把 docker 組隊，一次把一群不同 docker 給開起來的工具
pip3 install docker-compose ＊ 安裝 PHP (7.1.3以上) brew install php@7.2 ＊ 下載 Composer composer 是 php 的套件管理工具，想像他跟 pip, npm 這些的傢伙是一樣的
可以直接跑下面的指令，或是到下載頁面下載 php -r &amp;#34;copy(&amp;#39;https://getcomposer.org/installer&amp;#39;, &amp;#39;composer-setup.php&amp;#39;);&amp;#34; php -r &amp;#34;if (hash_file(&amp;#39;sha384&amp;#39;, &amp;#39;composer-setup.php&amp;#39;) === &amp;#39;93b544968e392c0362774670ac182b134cd3b3a09695e5dca5e53c3728f1a9f115f20b3b754bf9a1be329d521bdaa8b26ac6a13e9a62d6444cdb0dc8a1da0806156398a5cbe587c3f0fe57a54d8f5&amp;#39;) { echo &amp;#39;Installer verified&amp;#39;; } else { echo &amp;#39;Installer corrupt&amp;#39;; unlink(&amp;#39;composer-setup.</description>
    </item>
    
  </channel>
</rss>